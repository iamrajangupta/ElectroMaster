@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.ReviewOrder>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Commerce.Core.Api
@using Umbraco.Commerce.Core.Models
@using Umbraco.Commerce.Extensions
@{
    Layout = "Master.cshtml";

    var store = Model.Value<StoreReadOnly>("store", fallback: Fallback.ToAncestors);
    var Order = CommerceApi.Instance.GetCurrentOrder(store.Id);
  
}

@if (Order != null)
{
    <div class="section">
        <div class="container">
            <div class="col-12 order-details">
                <div class="section-title text-center">
                    <h3 class="text-xl font-medium mb-4 mt-8">Contact Information</h3>

                    <!-- Contact Information -->
                    <p>
                        <strong>Email :</strong> @Order.CustomerInfo.Email
                    </p>

                    <div class="row">
                        <!-- Billing Information -->
                        <div class="col-md-6">
                            <div class="info-table">
                                <h4 class="centered-heading">Billing Information</h4>
                                <table>
                                    <tr>
                                        <td><strong>Name :</strong></td>
                                        <td>@Order.CustomerInfo.FirstName @Order.CustomerInfo.LastName</td>
                                    </tr>
                                    <tr>
                                       
                                        <td><strong>Address :</strong></td>
                                        <td>
                                            @{
                                                var country = CommerceApi.Instance.GetCountry(Order.PaymentInfo.CountryId.Value);
                                            }
                                            <div>
                                                @Html.Raw(string.Join("<br>", new string[] {
                                            Order.Properties["billingAddressLine1"],
                                            Order.Properties["billingAddressLine2"],
                                            Order.Properties["billingCity"],
                                            country.Name,
                                            Order.Properties["billingZipCode"]
                                                                                }.Where(x => !x.IsNullOrWhiteSpace()).Select(x => Html.Encode(x))))
                                            </div>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>

                        <!-- Shipping Information -->
                        <div class="col-md-6">
                            <div class="info-table">
                                <h4 class="centered-heading">Shipping Information</h4>
                                <table>
                                    <tr>
                                        <td><strong>Name :</strong></td>
                                        <td>@Order.Properties["shippingFirstName"] @Order.Properties["shippingLastName"]</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Address :</strong></td>
                                        <td>
                                            <div>
                                                @Html.Raw(string.Join("<br>", new string[] {
                                            Order.Properties["shippingAddressLine1"],
                                            Order.Properties["shippingAddressLine2"],
                                            Order.Properties["shippingCity"],
                                            country.Name,
                                            Order.Properties["shippingZipCode"]
                                                                                }.Where(x => !x.IsNullOrWhiteSpace()).Select(x => Html.Encode(x))))
                                            </div>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="text-center">
                        @using (Html.BeginUmbracoForm("CreateCheckoutSession", "CheckoutSurface"))
                        {
                            var priceString = Order.TotalPrice.Value.WithTax;
                            //var cleanedPriceString = priceString.Replace("£", "").Replace(",", "");

                           @*  if (Decimal.TryParse(cleanedPriceString, out decimal decimalPrice))
                            { *@
                                var orderNo = Order.CartNumber;
                                var orderId = Order.Id;

                                @Html.Hidden("amount", priceString)
                                @Html.Hidden("orderId", orderId)
                                @Html.Hidden("productName", orderNo)
                                @Html.Hidden("quantity", 1)

                                <button class="primary-btn" type="submit">Continue to Payment</button>
@*                             } *@
                        }
                     @*    @using (await Html.BeginPaymentFormAsync(Order))
                        {
                            <button class="primary-btn" type="submit">Continue to Payment</button>
                        } *@
                    </div>
                </div>
            </div>
        </div>
    </div>

}
else
{
    <h4>You have no order in cart</h4>
}


